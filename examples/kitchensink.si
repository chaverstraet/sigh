var groupe: Int[] = []
var test: Int = 0

switch (groupe) {
    [1]: test = 1
    []: test = 2
    [1,2]: test = 3
    else: test = -1
}


var to_cast: String = "3"
var casted: Int = (Int) "4"
//print("we have:" + casted)


// This file showcases every single syntactic feature in the language.



fun array_add (a: Int[]): Int
{
    fun add (a: Int, b: Int): Int {
        return add2(a, b) // works!

        fun add2 (a: Int, b: Int): Int {
            return a + b
        }
    }

    if (a.length == 0)
        return 0

    var i: Int = 1
    var result: Int = a[0]

    var to_cast: String = "3"
    var casted: Int = (Int) to_cast

    while i < a.length {
        result = add(result, a[i])
        i = i + 1
    }

    return result
}



var total: Int = array_add([1, 2, 3])
var float_total: Float = total + 0.0

var math: Int = 1 + 3 * 4 * (1 + 3) / 12
validate5(math)
validate5(6) // some men just want to watch the world burn

var to_cast: String = "3"
//var casted: Int = (Int) "gijefozkadlp"

fun validate5 (value: Int)
{
    if (value!= 5)
        print("We wanted 5 but got: " + value)

    if (value > 5)
        print("It was too big.")
    else if (value < 5)
        print("It was too small.")
    else
        print("It's just right.")
}

struct Pair {
    var a: Int
    var b: Int
}

var type: Type = Pair
print("" + type)

fun sum_pair (pair: Pair): Int {
    return pair.a + pair.b
}

validate5(sum_pair($Pair(2, 3)))

fun use_array (array: Int[]) {}

var intArray: Int[] = []
var stringArray: String[] = []
use_array([])

var to_cast: String = "3"
var casted: Int = (Int) "5"